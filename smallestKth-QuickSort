// COPYRIGHTS.© ABANOB AYOUB 
// Description: 
//the 'findKthSmallest' function repeatedly applies the partition procedure to divide the array 
//into two partitions around a pivot element until the kth smallest element is found.


package com.mycompany.kthquicksort;
import java.util.Scanner;
import java.util.Random;

public class KthQuickSort {
    public static int[] generateRandomInput(int sizeLimit){
        int[] list = new int[sizeLimit];
        Random random =new Random();
        for (int i = 0; i < sizeLimit; i++) {
          list[i]=random.nextInt();
        }
        return list;
    }
    
      public static void printInput(int[] a, int r){
    
          for(int i=0;i<r;i++){
      
        System.out.print(a[i]+" ");
    }
    System.out.println("\n");
  }
    public static void main(String[] args) {

        //Getting the size limit of input list
        Scanner input = new Scanner(System.in);
        System.out.print("Enter an intger list size: ");
        int r = input.nextInt();
        
        
        
        
        
        
        
        //Generate random list input
        int[] arr = generateRandomInput(r);
        
        //Print the input list intgers
        printInput(arr,r);
        
        //Setup the K-th smallest number you want to get
        int k = 1;
 
        //Start the timer
        long startTime = System.nanoTime();
        
        //Call the function
        int result = findKthSmallest(arr,k);
        
        //Stop the timer
        long endTime = System.nanoTime();
        
        //Calculate excution time
        double executionTimeInSeconds = (endTime - startTime) / 1000000000.0;
        
        //Print the result K-th Smallest number
        System.out.println(k + "th smallest element is " + result); 
        
        //Print excution time    
        System.out.println("Algorithm Execution Time: " + executionTimeInSeconds + " seconds");
    }
    
    
    public static int findKthSmallest(int[] arr, int k) {
    //check whether K is in the range of 'arr' or not
    if (k < 1 || k > arr.length) {      
        throw new IllegalArgumentException("k is out of range"); 
    }
    int left = 0, right = arr.length - 1;
    while (left <= right) {
        int pivotIndex = partition(arr, left, right);
        if (pivotIndex == k - 1) {
            return arr[pivotIndex];
        } else if (pivotIndex > k - 1) {
            right = pivotIndex - 1;
        } else {
            left = pivotIndex + 1;
        }
    }
    return -1; // kth smallest element not found
}

private static int partition(int[] arr, int left, int right) {
    int pivot = arr[right];
    int i = left - 1;
    for (int j = left; j < right; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(arr, i, j);
        }
    }
    swap(arr, i + 1, right);
    return i + 1;
}

private static void swap(int[] arr, int i, int j) {
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}


}
// COPYRIGHTS.© ABANOB AYOUB 
// COPYRIGHTS.© ABANOB AYOUB 
